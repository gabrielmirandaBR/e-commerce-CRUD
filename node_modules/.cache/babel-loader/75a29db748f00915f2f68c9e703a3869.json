{"ast":null,"code":"import { getComputerProducts, getFilteredProducts } from \"../../services/MLAPI\";\nexport const REQUEST_PRODUCTS = 'REQUEST_PRODUCTS';\nexport const REQUEST_PRODUCTS_SUCCESS = 'REQUEST_PRODUCTS_SUCCESS';\nexport const REQUEST_PRODUCTS_ERROR = 'REQUEST_PRODUCTS_ERROR';\nexport const REQUEST_FILTERED_PRODUCTS_SUCCESS = 'REQUEST_FILTERED_PRODUCTS_SUCCESS';\nexport const GET_PRODUCTS_DETAILS = 'GET_PRODUCTS_DETAILS';\nexport function requestProducts() {\n  return {\n    type: REQUEST_PRODUCTS\n  };\n}\n;\nexport function requestProductsSuccess(data) {\n  return {\n    type: REQUEST_PRODUCTS_SUCCESS,\n    data\n  };\n}\n;\nexport function requestProductsError(error) {\n  return {\n    type: REQUEST_PRODUCTS_ERROR,\n    error\n  };\n}\n;\nexport function requestProductsFilteredSuccess(data) {\n  return {\n    type: REQUEST_FILTERED_PRODUCTS_SUCCESS,\n    data\n  };\n}\n;\nexport function getProductDetails(item) {\n  return {\n    type: GET_PRODUCTS_DETAILS,\n    item\n  };\n}\nexport function fetchProducts() {\n  return async dispatch => {\n    try {\n      dispatch(requestProducts()); // isFetching is true\n\n      const data = await getComputerProducts();\n      dispatch(requestProductsSuccess(data)); // altera estado products\n    } catch (error) {\n      dispatch(requestProductsError(error)); // altera estado products\n    }\n\n    ;\n  };\n}\n;\nexport function fetchFilteredProducts(product) {\n  return async dispatch => {\n    try {\n      dispatch(requestProducts()); // isFetching is true\n\n      const data = await getFilteredProducts(product);\n      dispatch(requestProductsFilteredSuccess(data));\n    } catch (error) {\n      dispatch(requestProductsError(error));\n    }\n\n    ;\n  };\n}\n;","map":{"version":3,"sources":["/home/gabriel/Documentos/TRYBE/desafios-processos-seletivos/easy_live_challenge/marketplace/src/redux/actions/index.js"],"names":["getComputerProducts","getFilteredProducts","REQUEST_PRODUCTS","REQUEST_PRODUCTS_SUCCESS","REQUEST_PRODUCTS_ERROR","REQUEST_FILTERED_PRODUCTS_SUCCESS","GET_PRODUCTS_DETAILS","requestProducts","type","requestProductsSuccess","data","requestProductsError","error","requestProductsFilteredSuccess","getProductDetails","item","fetchProducts","dispatch","fetchFilteredProducts","product"],"mappings":"AAAA,SAAQA,mBAAR,EAA6BC,mBAA7B,QAAsD,sBAAtD;AAEA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,iCAAiC,GAAG,mCAA1C;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD;AAAA;AAED,OAAO,SAASO,sBAAT,CAAgCC,IAAhC,EAAsC;AAC3C,SAAO;AACLF,IAAAA,IAAI,EAAEL,wBADD;AAELO,IAAAA;AAFK,GAAP;AAID;AAAA;AAED,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAC1C,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,sBADD;AAELQ,IAAAA;AAFK,GAAP;AAID;AAAA;AAED,OAAO,SAASC,8BAAT,CAAwCH,IAAxC,EAA8C;AACnD,SAAO;AACLF,IAAAA,IAAI,EAAEH,iCADD;AAELK,IAAAA;AAFK,GAAP;AAID;AAAA;AAED,OAAO,SAASI,iBAAT,CAA2BC,IAA3B,EAAiC;AACtC,SAAO;AACLP,IAAAA,IAAI,EAAEF,oBADD;AAELS,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR,CADE,CAC2B;;AAC7B,YAAMG,IAAI,GAAG,MAAMV,mBAAmB,EAAtC;AACAiB,MAAAA,QAAQ,CAACR,sBAAsB,CAACC,IAAD,CAAvB,CAAR,CAHE,CAGsC;AACzC,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdK,MAAAA,QAAQ,CAACN,oBAAoB,CAACC,KAAD,CAArB,CAAR,CADc,CACwB;AACvC;;AAAA;AACF,GARD;AASD;AAAA;AAED,OAAO,SAASM,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,SAAO,MAAOF,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR,CADE,CAC2B;;AAC7B,YAAMG,IAAI,GAAG,MAAMT,mBAAmB,CAACkB,OAAD,CAAtC;AACAF,MAAAA,QAAQ,CAACJ,8BAA8B,CAACH,IAAD,CAA/B,CAAR;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdK,MAAAA,QAAQ,CAACN,oBAAoB,CAACC,KAAD,CAArB,CAAR;AACD;;AAAA;AACF,GARD;AASD;AAAA","sourcesContent":["import {getComputerProducts, getFilteredProducts}from \"../../services/MLAPI\";\n\nexport const REQUEST_PRODUCTS = 'REQUEST_PRODUCTS';\nexport const REQUEST_PRODUCTS_SUCCESS = 'REQUEST_PRODUCTS_SUCCESS';\nexport const REQUEST_PRODUCTS_ERROR = 'REQUEST_PRODUCTS_ERROR';\nexport const REQUEST_FILTERED_PRODUCTS_SUCCESS = 'REQUEST_FILTERED_PRODUCTS_SUCCESS';\nexport const GET_PRODUCTS_DETAILS = 'GET_PRODUCTS_DETAILS';\n\nexport function requestProducts() {\n  return {\n    type: REQUEST_PRODUCTS,\n  };\n};\n\nexport function requestProductsSuccess(data) {\n  return {\n    type: REQUEST_PRODUCTS_SUCCESS,\n    data,\n  };\n};\n\nexport function requestProductsError(error) {\n  return {\n    type: REQUEST_PRODUCTS_ERROR,\n    error,\n  };\n}; \n\nexport function requestProductsFilteredSuccess(data) {\n  return {\n    type: REQUEST_FILTERED_PRODUCTS_SUCCESS,\n    data,\n  };\n};\n\nexport function getProductDetails(item) {\n  return {\n    type: GET_PRODUCTS_DETAILS,\n    item,\n  }\n}\n\nexport function fetchProducts() {\n  return async (dispatch) => {\n    try {\n      dispatch(requestProducts()); // isFetching is true\n      const data = await getComputerProducts();\n      dispatch(requestProductsSuccess(data)); // altera estado products\n    } catch (error) {\n      dispatch(requestProductsError(error)) // altera estado products\n    };\n  };\n};\n\nexport function fetchFilteredProducts(product) {\n  return async (dispatch) => {\n    try {\n      dispatch(requestProducts()); // isFetching is true\n      const data = await getFilteredProducts(product);\n      dispatch(requestProductsFilteredSuccess(data));\n    } catch (error) {\n      dispatch(requestProductsError(error));\n    };\n  };\n};\n"]},"metadata":{},"sourceType":"module"}